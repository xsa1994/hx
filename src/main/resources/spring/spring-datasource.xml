<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/aop
    https://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd"
>

    <!-- 注解方式配置事务,在service中使用@Transactional使用事务,由于事务不能跨越数据库,必须指定value,比如consumer/credits -->
    <tx:annotation-driven proxy-target-class="true"/>
    <!-- mode="aspectj" -->

    <bean id="dataSourceParent" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close" abstract="true">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="maxTotal" value="10"/>
        <property name="initialSize" value="3"/>
        <property name="maxIdle" value="5"/>
        <property name="minIdle" value="1"/>
        <property name="maxWaitMillis" value="30000"/>
        <property name="removeAbandonedOnBorrow" value="true"/>
        <property name="removeAbandonedOnMaintenance" value="true"/>
        <!-- Timeout in seconds before an abandoned connection can be removed. Defaults to 300 seconds -->
        <property name="removeAbandonedTimeout" value="60"/><!-- 这个参数配置后,一个连接被借出连接池超过这个时间不归还会认为是泄露的链接 -->
        <property name="logAbandoned" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="timeBetweenEvictionRunsMillis" value="90000"/><!-- 多久testWhileIdle一次 -->
        <property name="minEvictableIdleTimeMillis" value="600000"/><!-- 池中的连接空闲多久后被回收,默认值就是30分钟。 -->
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>
    </bean>

    <!-- 强制使用cglib代理 -->
    <!-- expose-proxy="true" 这句可以把当前的proxyBean放到ThreadLocal中以供访问. -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 注解方式配置事务,在service中使用@Transactional使用事务,由于事务不能跨越数据库,必须指定value,比如consumer/credits -->
    <tx:annotation-driven proxy-target-class="true"/>

    <bean name="dataSource" parent="dataSourceParent">
        <property name="url" value="${spring.datasource.url}"/>
        <property name="username" value="${spring.datasource.username}"/>
        <property name="password" value="${spring.datasource.password}"/>
        <property name="initialSize" value="5"/>
        <property name="minIdle" value="1"/>
        <property name="maxIdle" value="5"/>
        <property name="maxTotal" value="10"/>
    </bean>

    <!-- ========================================针对myBatis的配置项============================== -->
    <!-- 配置sqlSessionFactory -->

    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg>
            <bean class="org.mybatis.spring.SqlSessionFactoryBean">
                <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源以及SQL映射文件 -->
                <property name="dataSource" ref="dataSource"/>
                <property name="mapperLocations" value="classpath*:mybatis/*.xml"/>
                <property name="configLocation" value="classpath:spring/sqlMapConfig.xml"/>
                <property name="typeAliasesPackage" value="com.hx.domain"/>
            </bean>
        </constructor-arg>
    </bean>

    <!-- 配置Mapper接口实现 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hx.mapper"/>
        <property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
    </bean>

</beans>
